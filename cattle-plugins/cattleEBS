#!/bin/bash

# Notes:
#  - Please install "jq" package before using this driver.
WAIT_SLEEP_TIME_IN_SECONDS=2

usage() {
    err "Invalid usage. Usage: "
    err "\t$0 create <json params>"
    err "\t$0 delete <json params>"
    err "\t$0 attach <json params>"
    err "\t$0 detach <json params>"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir> <json params>"
    exit 1
}

err() {
    echo -ne $@ 1>&2
}

log() {
    echo -ne $@ >&1
}

get_meta_data() {
    EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
    EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
    INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
}

wait_volume_transition() {
    local current_state=$1
    local start_state=$1
    local end_state=$2
    while [ "${current_state}" == "${start_state}" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local volumes=`aws ec2 describe-volumes --volume-ids ${VOLUME_ID} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to describe volume ${VOLUME_ID}: ${volumes}\"}"
            exit 1
        fi
        current_state=$(echo ${volumes} | jq -r '.Volumes[0].State')
    done
    if [ "${current_state}" != "${end_state}" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed volume ${VOLUME_ID} transition, expected end state is: ${end_state}, got ${current_state}\"}"
        exit 1
    fi

}

wait_volume_attaching() {
    local attach_state="attaching"
    while [ "$attach_state" == "attaching" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local volumes=`aws ec2 describe-volumes --volume-ids ${VOLUME_ID} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to describe volume ${VOLUME_ID}: ${volumes}\"}"
            exit 1
        fi
        attach_state=$(echo ${volumes} | jq -r '.Volumes[0].Attachments[0].State')
    done
    if [ "$attach_state" != "attached" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to attach volume ${VOLUME_ID}, final state is: ${attach_state}\"}"
        exit 1
    fi
}

detach_if_attached(){
    local volumes=`aws ec2 describe-volumes --volume-ids ${VOLUME_ID} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed in attach: ${volumes}\"}"
        exit 1
    fi

    # get attached instance id
    local attached_instance_id=$(echo ${volumes} | jq -r '.Volumes[0].Attachments[0].InstanceId')

    # check if volumeID is already attached to another instance
    if [ "${attached_instance_id}" != "null" ]; then
        local instance_status=`aws ec2 describe-instance-status --instance-ids ${attached_instance_id} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed in attach: ${instance_status}\"}"
            exit 1
        fi

        # if currently attached instance VM is running, we can't detach, error out here
        local status=$(echo ${instance_status} | jq -r '.InstanceStatuses[0].InstanceState.Name')
        if [ "${status}" == "running" ] && [ "${attached_instance_id}" != "${INSTANCE_ID}" ]; then
            err "{ \"status\": \"Failure\", \"message\": \"volume ${VOLUME_ID} is currently attached to a running instance ${attached_instance_id}, can not detach or re-use it\"}"
            exit 1
        fi

        # detach it from currently attached instance VM
        local error=`aws ec2 detach-volume --volume-id ${VOLUME_ID} --instance-id ${attached_instance_id} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to detach ebs volume-id ${VOLUME_ID} from instance-id ${attached_instance_id}. ${error}\"}"
            exit 1
        fi
        wait_volume_transition "in-use" "available"
    fi
}

find_available_device_path() {
    local attachments=`aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${INSTANCE_ID} | jq -r '.Volumes[].Attachments[]'`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to describe volume of instance-id ${INSTANCE_ID}. ${attachments}\"}"
        exit 1
    fi

    local prefered_device_paths="fghijklmnop"
    for (( i=0; i<${#prefered_device_paths}; i++ )); do
        local current="/dev/sd${prefered_device_paths:$i:1}"
        local device=`echo ${attachments} | jq "select(.Device==\"${current}\") | .Device"`
        if [ "${device}" == "" ]; then
            echo ${current};
            break
        fi
    done
}

find_matching_linux_device_path() {
    while true; do
        local linux_device_path=`lsblk -o KNAME | sed -e 's/^/\/dev\//' | grep "$1"`
        if [ "${linux_device_path}" == "$1" ]; then
            echo ${linux_device_path}
            break
        fi

        local device_new_format="/dev/xvd""${1: -1}"
        local linux_device_path=`lsblk -o KNAME | sed -e 's/^/\/dev\//' | grep "${device_new_format}"`
        if [ "${linux_device_path}" == "${device_new_format}" ]; then
            echo ${linux_device_path}
            break
        fi

        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
    done
}

create() {
    VOLUME_ID=$(echo $1 | jq -r '.volumeID')
    if [ "${VOLUME_ID}" != "null" ]; then
        log "{\"status\": \"Success\",\"options\":{}}"
        exit 0
    fi

    local name=$(echo $1 | jq -r '.name')
    local size=$(echo $1 | jq -r '.size')
    if [ "${name}" == "null" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"name is missing, can't create\"}"
        exit 1
    fi
    if [ "${size}" == "null" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"size is missing, can't create\"}"
        exit 1
    fi
    local type=$(echo $1 | jq -r '.volumeType')
    local iops_option=""
    if [ "${type}" == "io1" ]; then
        local iops=$(echo $1 | jq -r '.iops')
        if [ "${iops}" != "null" ]; then
            iops_option="--iops ${iops}"
        fi
    fi

    local type_option=""
    if [ "${type}" != "null" ]; then
        type_option="--volume-type ${type}"
    fi

    get_meta_data

    # create a EBS volume using aws-cli
    local volume=`aws ec2 create-volume --size ${size} --region ${EC2_REGION} --availability-zone ${EC2_AVAIL_ZONE} ${type_option} ${iops_option} 2>&1`
    if [ $? -ne 0 ]; then
        # now volume is the error message
        err "{ \"status\": \"Failure\", \"message\": \"Failed in create: ${volume}\"}"
        exit 1
    fi
    VOLUME_ID=$(echo ${volume} | jq -r '.VolumeId')

    wait_volume_transition "creating" "available"

    # tag the newly created volume
    local error=`aws ec2 create-tags --resources ${VOLUME_ID} --tags Key=Name,Value=${name} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed in create: create-tags for volume ${VOLUME_ID} Key=Name,Value=${name} failed. ${error}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\",\"options\":{\"created\":true,\"volumeID\":\"${VOLUME_ID}\"}}"
    exit 0
}

delete() {
    local created=$(echo $1 | jq -r '.options.created')
    if [ "${created}" == "null" ]; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    VOLUME_ID=$(echo $1 | jq -r '.options.volumeID')
    if [ "${VOLUME_ID}" == "null" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"volumeID is missing, can't delete\"}"
        exit 1
    fi

    local volumes=`aws ec2 describe-volumes --volume-ids ${VOLUME_ID} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to describe volume ${VOLUME_ID}: ${volumes}\"}"
        exit 1
    fi

    current_state=$(echo ${volumes} | jq -r '.Volumes[0].State')
    if [ "${current_state}" != "available" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to delete volume ${VOLUME_ID}, current state: ${current_state} is not available\"}"
        exit 1
    fi

    local error=`aws ec2 delete-volume --volume-id ${VOLUME_ID} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to delete volume ${VOLUME_ID}. ${error}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\"}"
    exit 0
}

attach() {
    VOLUME_ID=$(echo $1 | jq -r '.volumeID')
    if [ "${VOLUME_ID}" == "null" ]; then
        err "{ \"status\": \"Failure\", \"message\": \"volumeID is missing, can't attach\"}"
        exit 1
    fi

    get_meta_data
    detach_if_attached

    local device_path=$(find_available_device_path)

    local error=`aws ec2 attach-volume --volume-id ${VOLUME_ID} --instance-id ${INSTANCE_ID} --device ${device_path} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to attach ebs volume-id ${VOLUME_ID} as device:${device_path} to aws instance-id ${INSTANCE_ID}. ${error}\"}"
        exit 1
    fi

    wait_volume_attaching

    # need to return real linux device path, it could be in a different format "sdf" => "xvdf"
    local linux_device_path=$(find_matching_linux_device_path "${device_path}")

    log "{\"status\":\"Success\", \"device\":\"${linux_device_path}\"}"
    exit 0
}

detach() {
    local aws_device_path="/dev/sd""${1: -1}"

    get_meta_data

    # from device, get VOLUME_ID
    local attachments=`aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${INSTANCE_ID} | jq -r '.Volumes[].Attachments[]'`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to describe volume of instance-id ${INSTANCE_ID}. ${attachments}\"}"
        exit 1
    fi

    VOLUME_ID=`echo ${attachments} | jq "select(.Device==\"${aws_device_path}\") | .VolumeId"`
    VOLUME_ID=`echo ${VOLUME_ID=} | sed -e 's/^"//' -e 's/"$//'`

    # no such device attached
    if [ "${VOLUME_ID}" == "" ]; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    local error=`aws ec2 detach-volume --volume-id ${VOLUME_ID} 2>&1`
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to detach ebs volume-id ${VOLUME_ID} from current instance. ${error}\"}"
        exit 1
    fi
    wait_volume_transition "in-use" "available"
    log "{\"status\": \"Success\"}"
    exit 0
}

domount() {
    log "{\"status\": \"Not supported\"}"
    exit 0
}

unmount() {
    log "{\"status\": \"Not supported\"}"
    exit 0
}

op=$1

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    create)
        create $@
        ;;
    delete)
        delete $@
        ;;
    attach)
        attach $@
        ;;
    detach)
        detach $@
        ;;
    mount)
        domount $@
        ;;
    unmount)
        unmount $@
        ;;
    *)
    usage
esac

exit 1
