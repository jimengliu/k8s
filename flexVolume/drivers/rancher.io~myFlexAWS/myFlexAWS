#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 attach <json params>"
	err "\t$0 detach <mount device>"
	err "\t$0 mount <mount dir> <mount device> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

DEVICE="/dev/xvdh"
ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

attach() {
	VOLUMEID=$(echo $1 | jq -r '.volumeID')

	INSTANCEID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
	if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to get aws instance-id\"}"
            exit 1
        fi
	aws ec2 attach-volume --volume-id ${VOLUMEID} --instance-id ${INSTANCEID} --device ${DEVICE} >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to attach ebs volume-id ${VOLUMEID} as device:${DEVICE} to aws instance-id ${INSTANCEID}\"}"
            exit 1
        fi
	# wait until the state is not attaching, for now just sleep 10 seconds
	sleep 10
	log "{\"status\":\"Success\", \"device\":\"${DEVICE}\"}"
	exit 0
}

detach() {
	VOLUMEID=`sudo e2label ${DEVICE} 2>/dev/null`
	# from the DEV path, we need to figure out its aws volume-id
	aws ec2 detach-volume --volume-id ${VOLUMEID} >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to detach ebs volume-id ${VOLUMEID} from current instance\"}"
            exit 1
        fi
	log "{\"status\": \"Success\"}"
	exit 0
}

domount() {
	MNTPATH=$1
	VOLUMEID=$(echo $3 | jq -r '.volumeID')
	FSTYPE=$(echo $3|jq -r '.["kubernetes.io/fsType"]')

	if [ ! -b "${DEVICE}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"${DEVICE} does not exist\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	VOLFSTYPE=`blkid -o udev ${DEVICE} 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2`
	if [ "${VOLFSTYPE}" == "" ]; then
		mkfs -t ${FSTYPE} ${DEVICE} >/dev/null 2>&1 
		if [ $? -ne 0 ]; then
			err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${DEVICE}\"}"
			exit 1
		fi
                sudo e2label ${DEVICE} ${VOLUMEID} >/dev/null 2>&1
                if [ $? -ne 0 ]; then
                        err "{ \"status\": \"Failure\", \"message\": \"Failed to label device ${DEVICE} to ${VOLUMEID}\"}"
                        exit 1
                fi
	fi

	mkdir -p ${MNTPATH} &> /dev/null

	mount ${DEVICE} ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DEVICE} at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

unmount() {
	MNTPATH=$1
	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	log "{\"status\": \"Success\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log "{\"status\": \"Success\"}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach $*
		;;
	detach)
		detach $*
		;;
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		usage
esac

exit 1
